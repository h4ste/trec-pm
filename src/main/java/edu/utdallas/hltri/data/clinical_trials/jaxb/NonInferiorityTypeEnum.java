//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.25 at 12:59:43 PM CDT 
//


package edu.utdallas.hltri.data.clinical_trials.jaxb;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for non_inferiority_type_enum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="non_inferiority_type_enum">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Superiority"/>
 *     &lt;enumeration value="Non-Inferiority"/>
 *     &lt;enumeration value="Equivalence"/>
 *     &lt;enumeration value="Other"/>
 *     &lt;enumeration value="Non-Inferiority or Equivalence"/>
 *     &lt;enumeration value="Superiority or Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "non_inferiority_type_enum")
@XmlEnum
public enum NonInferiorityTypeEnum {

    @XmlEnumValue("Superiority")
    SUPERIORITY("Superiority"),
    @XmlEnumValue("Non-Inferiority")
    NON_INFERIORITY("Non-Inferiority"),
    @XmlEnumValue("Equivalence")
    EQUIVALENCE("Equivalence"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    @XmlEnumValue("Non-Inferiority or Equivalence")
    NON_INFERIORITY_OR_EQUIVALENCE("Non-Inferiority or Equivalence"),
    @XmlEnumValue("Superiority or Other")
    SUPERIORITY_OR_OTHER("Superiority or Other");
    private final String value;

    NonInferiorityTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static NonInferiorityTypeEnum fromValue(String v) {
        for (NonInferiorityTypeEnum c: NonInferiorityTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
