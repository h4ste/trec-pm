//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.24 at 11:14:59 AM CDT 
//


package edu.utdallas.hltri.data.medline.jaxb.struct;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{}Investigator" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "investigators"
})
@XmlRootElement(name = "InvestigatorList")
public class InvestigatorList implements Serializable
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "Investigator", required = true)
    protected List<Investigator> investigators;

    /**
     * Gets the value of the investigators property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the investigators property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInvestigators().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Investigator }
     * 
     * 
     */
    public List<Investigator> getInvestigators() {
        if (investigators == null) {
            investigators = new ArrayList<Investigator>();
        }
        return this.investigators;
    }

    public boolean equals(java.lang.Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final InvestigatorList that = ((InvestigatorList) object);
        {
            List<Investigator> leftInvestigators;
            leftInvestigators = (((this.investigators!= null)&&(!this.investigators.isEmpty()))?this.getInvestigators():null);
            List<Investigator> rightInvestigators;
            rightInvestigators = (((that.investigators!= null)&&(!that.investigators.isEmpty()))?that.getInvestigators():null);
            if ((this.investigators!= null)&&(!this.investigators.isEmpty())) {
                if ((that.investigators!= null)&&(!that.investigators.isEmpty())) {
                    if (!leftInvestigators.equals(rightInvestigators)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.investigators!= null)&&(!that.investigators.isEmpty())) {
                    return false;
                }
            }
        }
        return true;
    }

    public int hashCode() {
        int currentHashCode = 1;
        {
            currentHashCode = (currentHashCode* 31);
            List<Investigator> theInvestigators;
            theInvestigators = (((this.investigators!= null)&&(!this.investigators.isEmpty()))?this.getInvestigators():null);
            if ((this.investigators!= null)&&(!this.investigators.isEmpty())) {
                currentHashCode += theInvestigators.hashCode();
            }
        }
        return currentHashCode;
    }

}
