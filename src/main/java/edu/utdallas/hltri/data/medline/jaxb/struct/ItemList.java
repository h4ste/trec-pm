//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.08.24 at 11:14:59 AM CDT 
//


package edu.utdallas.hltri.data.medline.jaxb.struct;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{}Item" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ListType" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "items"
})
@XmlRootElement(name = "ItemList")
public class ItemList implements Serializable
{

    private final static long serialVersionUID = 1L;
    @XmlElement(name = "Item", required = true)
    protected List<String> items;
    @XmlAttribute(name = "ListType", required = true)
    protected String listType;

    /**
     * Gets the value of the items property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the items property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getItems().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getItems() {
        if (items == null) {
            items = new ArrayList<String>();
        }
        return this.items;
    }

    /**
     * Gets the value of the listType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getListType() {
        return listType;
    }

    /**
     * Sets the value of the listType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setListType(String value) {
        this.listType = value;
    }

    public boolean equals(java.lang.Object object) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ItemList that = ((ItemList) object);
        {
            List<String> leftItems;
            leftItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            List<String> rightItems;
            rightItems = (((that.items!= null)&&(!that.items.isEmpty()))?that.getItems():null);
            if ((this.items!= null)&&(!this.items.isEmpty())) {
                if ((that.items!= null)&&(!that.items.isEmpty())) {
                    if (!leftItems.equals(rightItems)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if ((that.items!= null)&&(!that.items.isEmpty())) {
                    return false;
                }
            }
        }
        {
            String leftListType;
            leftListType = this.getListType();
            String rightListType;
            rightListType = that.getListType();
            if (this.listType!= null) {
                if (that.listType!= null) {
                    if (!leftListType.equals(rightListType)) {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                if (that.listType!= null) {
                    return false;
                }
            }
        }
        return true;
    }

    public int hashCode() {
        int currentHashCode = 1;
        {
            currentHashCode = (currentHashCode* 31);
            List<String> theItems;
            theItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            if ((this.items!= null)&&(!this.items.isEmpty())) {
                currentHashCode += theItems.hashCode();
            }
        }
        {
            currentHashCode = (currentHashCode* 31);
            String theListType;
            theListType = this.getListType();
            if (this.listType!= null) {
                currentHashCode += theListType.hashCode();
            }
        }
        return currentHashCode;
    }

}
