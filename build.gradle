plugins {
	id 'java'
}

group 'edu.utdallas.hltri'
version '1.0.0'

sourceCompatibility = 1.8

repositories {
	jcenter()
	maven {
	        url 'https://repository.apache.org/content/repositories/releases/'
	}
}

dependencies {
// Faster XML parser implementation
	compile 'com.fasterxml:aalto-xml:1.0.0'

// Templating engine (used for HTML output)
	compile ('org.apache.velocity:velocity:1.7') {
		exclude group: 'log4j', module: 'log4j'
		exclude group: 'logkit', module: 'logkit'
		exclude group: 'commons-logging', module: 'logging'
	}
	compile ('org.apache.velocity:velocity-tools:2.0') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}

// Google's general utility library
	compile 'com.google.guava:guava:21.+'
	compileOnly 'com.google.errorprone:error_prone_annotations:2.0.15'

// Super fast CSV parser
	compile 'com.univocity:univocity-parsers:2.4.1'

// Light object graph serialization
	compile 'io.protostuff:protostuff-runtime:1.6.0'
	compile 'io.protostuff:protostuff-core:1.6.0'

// Retrofit RESTful API helpers
	compile 'com.squareup.retrofit2:retrofit:2.3.0'
	compile 'com.squareup.retrofit2:converter-jackson:2.3.0'

// Mock web server used for DGIdb unit testing
	testCompile 'com.squareup.okhttp3:mockwebserver:3.8.1'
	testCompile 'com.squareup.retrofit2:retrofit-mock:2.3.0'

// Google's inmemory filesystem implemention (used for integration testing)
	testCompile 'com.google.jimfs:jimfs:1.1'

	// jUnit testing framework
	testCompile 'com.novocode:junit-interface:0.11'

	// Spooky in-house UTD libraries
	compile 'edu.utdallas.hltri:scribe:0.3.1'
	compile 'edu.utdallas.hltri:medbase:1.0.0'
	compile 'edu.utdallas.hltri:hltri-util:1.0.1'
	compile 'edu.utdallas.hltri:inquire:0.1.0'

	// Override version of GATE used by scribe
	// compile 'uk.ac.gate:gate-core:8.5.1'
	runtime fileTree(dir: 'lib', include: '*.jar')	
}

// Index construction
createScript('edu.utdallas.hltri.data.cancer_abst.ExtraCancerAbstractIndexer', 'index_abstracts')
createScript('edu.utdallas.hltri.data.medline.jaxb.JaxbMedlineIndexer', 'index_medline')
createScript('edu.utdallas.hltri.data.clinical_trials.ClinicalTrialIndexerCli', 'index_trials')

// System execution
createScript('edu.utdallas.hltri.trec.pm.ui.Driver', 'search_topics')
createScript('edu.utdallas.hltri.trec.pm.ui.SubmissionMerger', 'merge_runs')

// Creates scripts for entry points
def createScript(String mainClass, String name) {

	build << {
		File scriptFolder = new File(projectDir, 'bin')
		scriptFolder.mkdirs()

		File shellScript = new File(scriptFolder, name + '.sh')
		shellScript.withPrintWriter {
			it.println '#!/bin/sh'
			it.println "java \$JAVA_OPTS -cp ${getRuntimeClasspath()} ${mainClass} \"\$@\""
		}

		File batchFile = new File(scriptFolder, name + '.bat')
		batchFile.withPrintWriter {
			it.println('@ECHO OFF')
			it.println("java %JAVA_OPTS% -cp ${getRuntimeClasspath()} ${mainClass} %*")
		}
	}
}

String getRuntimeClasspath() {
	sourceSets.main.runtimeClasspath.collect { it.absolutePath }.join(File.pathSeparator)
}
